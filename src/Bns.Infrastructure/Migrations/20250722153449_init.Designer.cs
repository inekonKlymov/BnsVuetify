// <auto-generated />
using System;
using Bns.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bns.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250722153449_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bns.Domain.DataSources.DataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ConfigurationId")
                        .HasColumnType("uuid")
                        .HasColumnName("ConfigurationId");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection_string");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modify_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("data_source");
                });

            modelBuilder.Entity("Bns.Domain.DataSources.DataSourceOlapConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AllowWritebackOnAggregationLevel")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_writeback_on_aggregation_level");

                    b.Property<int>("FiscalOffset")
                        .HasColumnType("integer")
                        .HasColumnName("fiscal_offset");

                    b.Property<bool>("Impersonate")
                        .HasColumnType("boolean")
                        .HasColumnName("impersonate");

                    b.Property<bool>("LoadMemberCodeProperties")
                        .HasColumnType("boolean")
                        .HasColumnName("load_member_code_properties");

                    b.Property<int>("LoadMembersCount")
                        .HasColumnType("integer")
                        .HasColumnName("load_members_count");

                    b.Property<int>("PoolSize")
                        .HasColumnType("integer")
                        .HasColumnName("pool_size");

                    b.Property<bool>("PoolingEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("use_fiscal_offset");

                    b.Property<bool>("UseOlapNotes")
                        .HasColumnType("boolean")
                        .HasColumnName("use_olap_notes");

                    b.Property<int>("WritebackLeafLimit")
                        .HasColumnType("integer")
                        .HasColumnName("writeback_leaf_limit");

                    b.HasKey("Id");

                    b.ToTable("data_source_olap_config");
                });

            modelBuilder.Entity("Bns.Domain.DataSources.DataSource", b =>
                {
                    b.HasOne("Bns.Domain.DataSources.DataSourceOlapConfig", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId");

                    b.Navigation("Configuration");
                });
#pragma warning restore 612, 618
        }
    }
}
